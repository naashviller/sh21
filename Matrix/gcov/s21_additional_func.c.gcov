        -:    0:Source:s21_matrix_func/s21_additional_func.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
      101:    3:int s21_matrix_ptr_is_null(const matrix_t *const A) {
      101:    4:  int return_value = -1;
        -:    5:
      101:    6:  if (A == NULL) {
       10:    7:    return_value = 1;
        -:    8:  } else {
       91:    9:    return_value = 0;
        -:   10:  }
      101:   11:  return return_value;
        -:   12:}
        -:   13:
        7:   14:int s21_matrix_sizes_le_zero(const matrix_t *const A) {
        7:   15:  int return_value = -1;
        -:   16:
        7:   17:  if (s21_matrix_ptr_is_null(A) == 1) {
        -:   18:  } else {
        6:   19:    if ((A->rows <= 0) || (A->columns <= 0)) {
        5:   20:      return_value = 1;
        -:   21:    } else {
        1:   22:      return_value = 0;
        -:   23:    }
        -:   24:  }
        7:   25:  return return_value;
        -:   26:}
        -:   27:
        7:   28:int s21_matrixes_sizes_is_equal(const matrix_t *const A,
        -:   29:                                const matrix_t *const B) {
        7:   30:  int return_value = -1;
        -:   31:
        7:   32:  if ((s21_matrix_ptr_is_null(A) == 1) || (s21_matrix_ptr_is_null(B) == 1)) {
        -:   33:  } else {
        4:   34:    if ((A->rows == B->rows) && (A->columns == B->columns)) {
        1:   35:      return_value = 1;
        -:   36:    } else {
        3:   37:      return_value = 0;
        -:   38:    }
        -:   39:  }
        7:   40:  return return_value;
        -:   41:}
        -:   42:
        5:   43:int s21_matrix_element_is_nan_inf(const matrix_t *const A) {
        5:   44:  int return_value = -1;
        -:   45:
        5:   46:  if (s21_matrix_ptr_is_null(A) == 1) {
        -:   47:  } else {
        4:   48:    return_value = 0;
       12:   49:    for (int i = 0; i < A->rows; i++) {
       29:   50:      for (int j = 0; j < A->columns; j++) {
       21:   51:        if ((S21_IS_NAN(A->matrix[i][j]) == 1) ||
       20:   52:            (S21_IS_INF_P(A->matrix[i][j]) == 1) ||
       19:   53:            (S21_IS_INF_N(A->matrix[i][j]) == 1)) {
        3:   54:          return_value = 1;
        3:   55:          i = A->rows;
        3:   56:          j = A->columns;
        -:   57:        }
        -:   58:      }
        -:   59:    }
        -:   60:  }
        5:   61:  return return_value;
        -:   62:}
        -:   63:
        4:   64:int s21_double_is_nan_inf(double number) {
        4:   65:  int return_value = -1;
        -:   66:
        4:   67:  if ((S21_IS_NAN(number) == 1) || (S21_IS_INF_P(number) == 1) ||
        2:   68:      (S21_IS_INF_N(number) == 1)) {
        3:   69:    return_value = 1;
        -:   70:  } else {
        1:   71:    return_value = 0;
        -:   72:  }
        4:   73:  return return_value;
        -:   74:}
        -:   75:
        5:   76:int s21_matrixes_is_correct_for_mult(const matrix_t *const A,
        -:   77:                                     const matrix_t *const B) {
        5:   78:  int return_value = -1;
        -:   79:
        5:   80:  if ((s21_matrix_ptr_is_null(A) == 1) || (s21_matrix_ptr_is_null(B) == 1)) {
        -:   81:  } else {
        2:   82:    if (A->columns == B->rows) {
        1:   83:      return_value = 1;
        -:   84:    } else {
        1:   85:      return_value = 0;
        -:   86:    }
        -:   87:  }
        5:   88:  return return_value;
        -:   89:}
        -:   90:
        3:   91:int s21_matrix_is_square(const matrix_t *const A) {
        3:   92:  int return_value = -1;
        -:   93:
        3:   94:  if (s21_matrix_ptr_is_null(A) == 1) {
        -:   95:  } else {
        2:   96:    if (A->rows == A->columns) {
        1:   97:      return_value = 1;
        -:   98:    } else {
        1:   99:      return_value = 0;
        -:  100:    }
        -:  101:  }
        3:  102:  return return_value;
        -:  103:}
        -:  104:
       14:  105:void s21_fill_minor_matrix(const matrix_t *const A,
        -:  106:                           const matrix_t *minor_matrix, int minor_row,
        -:  107:                           int minor_column) {
       28:  108:  if ((s21_matrix_ptr_is_null(A) == 1) ||
       28:  109:      (s21_matrix_ptr_is_null(minor_matrix) == 1) || (minor_row < 0) ||
       14:  110:      (minor_row > A->rows) || (minor_column < 0) ||
       14:  111:      (minor_column > A->columns)) {
        -:  112:  } else {
       36:  113:    for (int i = 0, A_i = 0; i < minor_matrix->rows; i++, A_i++) {
       22:  114:      if (A_i == minor_row) {
       12:  115:        A_i++;
        -:  116:      }
       70:  117:      for (int j = 0, A_j = 0; j < minor_matrix->columns; j++, A_j++) {
       48:  118:        if (A_j == minor_column) {
       13:  119:          A_j++;
        -:  120:        }
       48:  121:        minor_matrix->matrix[i][j] = A->matrix[A_i][A_j];
        -:  122:      }
        -:  123:    }
        -:  124:  }
       14:  125:  return;
        -:  126:}
        -:  127:
       11:  128:double s21_determinant_calculation(const matrix_t *const A, int *return_value) {
       11:  129:  int return_value_tmp = -1;
       11:  130:  double result = 0.0;
        -:  131:
       11:  132:  if (A->rows == 1) {
        7:  133:    result = A->matrix[0][0];
        -:  134:  } else {
        -:  135:    matrix_t minor_matrix;
       13:  136:    for (int i = 0, sign = 1; i < A->columns; i++, sign *= -1) {
        -:  137:      return_value_tmp =
        9:  138:          s21_create_matrix(A->rows - 1, A->columns - 1, &minor_matrix);
        9:  139:      if (return_value_tmp == RETURN_OK_0) {
        9:  140:        s21_fill_minor_matrix(A, &minor_matrix, 0, i);
       18:  141:        result += sign * A->matrix[0][i] *
        9:  142:                  s21_determinant_calculation(&minor_matrix, return_value);
        9:  143:        s21_remove_matrix(&minor_matrix);
        -:  144:      } else {
    #####:  145:        *return_value = RETURN_ERROR_INCORRECT_MARIX_1;
        -:  146:      }
        -:  147:    }
        -:  148:  }
       11:  149:  return result;
        -:  150:}
