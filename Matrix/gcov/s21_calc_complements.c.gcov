        -:    0:Source:s21_matrix_func/s21_calc_complements.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
        -:    3:void s21_complements_calculation(const matrix_t *const A,
        -:    4:                                 const matrix_t *result, int *return_value);
        -:    5:
       12:    6:int s21_calc_complements(matrix_t *A, matrix_t *result) {
       12:    7:  int return_value = -1;
        -:    8:
       22:    9:  if ((s21_matrix_ptr_is_null(A) == 1) ||
       19:   10:      (s21_matrix_ptr_is_null(result) == 1) ||
        9:   11:      (s21_matrix_sizes_le_zero(A) == 1)) {
        4:   12:    return_value = RETURN_ERROR_INCORRECT_MARIX_1;
       15:   13:  } else if ((s21_matrix_is_square(A) == 0) ||
        7:   14:             (s21_matrix_element_is_nan_inf(A) == 1)) {
        4:   15:    return_value = RETURN_CALCULATION_ERROR_2;
        -:   16:  } else {
        4:   17:    return_value = s21_create_matrix(A->rows, A->columns, result);
        4:   18:    if (return_value == RETURN_OK_0) {
        4:   19:      s21_complements_calculation(A, result, &return_value);
        -:   20:    }
        -:   21:  }
       12:   22:  return return_value;
        -:   23:}
        -:   24:
        4:   25:void s21_complements_calculation(const matrix_t *const A,
        -:   26:                                 const matrix_t *result, int *return_value) {
        4:   27:  if (A->rows > 1) {
        -:   28:    matrix_t minor_matrix;
        3:   29:    *return_value =
        3:   30:        s21_create_matrix(A->rows - 1, A->columns - 1, &minor_matrix);
        3:   31:    if (*return_value == RETURN_OK_0) {
        3:   32:      int sign = 1;
        3:   33:      *return_value = RETURN_OK_0;
       13:   34:      for (int i = 0; i < A->rows; i++) {
       44:   35:        for (int j = 0; j < A->columns; j++) {
       34:   36:          s21_fill_minor_matrix(A, &minor_matrix, i, j);
       34:   37:          sign = ((i + j) % 2 == 0) ? (+1) : (-1);
       34:   38:          result->matrix[i][j] =
       34:   39:              sign * s21_determinant_calculation(&minor_matrix, return_value);
        -:   40:        }
        -:   41:      }
        3:   42:      s21_remove_matrix(&minor_matrix);
        -:   43:    }
        -:   44:  } else {
        1:   45:    result->matrix[0][0] = 1.0;
        -:   46:  }
        4:   47:  return;
        -:   48:}
