        -:    0:Source:s21_matrix_func/s21_mult_matrix.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
        -:    3:void s21_mult_matrixes(const matrix_t *const A, const matrix_t *const B,
        -:    4:                       const matrix_t *result);
        -:    5:
       18:    6:int s21_mult_matrix(matrix_t *A, matrix_t *B, matrix_t *result) {
       18:    7:  int return_value = -1;
        -:    8:
       30:    9:  if ((s21_matrix_ptr_is_null(A) == 1) || (s21_matrix_ptr_is_null(B) == 1) ||
       23:   10:      (s21_matrix_ptr_is_null(result) == 1) ||
       21:   11:      (s21_matrix_sizes_le_zero(A) == 1) ||
       10:   12:      (s21_matrix_sizes_le_zero(B) == 1)) {
        8:   13:    return_value = RETURN_ERROR_INCORRECT_MARIX_1;
       13:   14:  } else if ((s21_matrixes_is_correct_for_mult(A, B) == 0) ||
        6:   15:             (s21_matrix_element_is_nan_inf(A) == 1) ||
        3:   16:             (s21_matrix_element_is_nan_inf(B) == 1)) {
        7:   17:    return_value = RETURN_CALCULATION_ERROR_2;
        -:   18:  } else {
        3:   19:    return_value = s21_create_matrix(A->rows, B->columns, result);
        3:   20:    if (return_value == RETURN_OK_0) {
        3:   21:      s21_mult_matrixes(A, B, result);
        -:   22:    }
        -:   23:  }
       18:   24:  return return_value;
        -:   25:}
        -:   26:
        3:   27:void s21_mult_matrixes(const matrix_t *const A, const matrix_t *const B,
        -:   28:                       const matrix_t *result) {
       14:   29:  for (int i = 0; i < A->rows; i++) {
       42:   30:    for (int j = 0; j < B->columns; j++) {
      133:   31:      for (int k = 0; k < A->columns; k++) {
      102:   32:        result->matrix[i][j] += A->matrix[i][k] * B->matrix[k][j];
        -:   33:      }
        -:   34:    }
        -:   35:  }
        -:   36:
        3:   37:  return;
        -:   38:}
