        -:    0:Source:s21_matrix_func/s21_inverse_matrix.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
        -:    3:void s21_inverse_calculation(matrix_t *A, matrix_t *result, int *return_value);
        -:    4:
       13:    5:int s21_inverse_matrix(matrix_t *A, matrix_t *result) {
       13:    6:  int return_value = -1;
        -:    7:
       24:    8:  if ((s21_matrix_ptr_is_null(A) == 1) ||
       21:    9:      (s21_matrix_ptr_is_null(result) == 1) ||
       10:   10:      (s21_matrix_sizes_le_zero(A) == 1)) {
        4:   11:    return_value = RETURN_ERROR_INCORRECT_MARIX_1;
       17:   12:  } else if ((s21_matrix_is_square(A) == 0) ||
        8:   13:             (s21_matrix_element_is_nan_inf(A) == 1)) {
        4:   14:    return_value = RETURN_CALCULATION_ERROR_2;
        -:   15:  } else {
        5:   16:    s21_inverse_calculation(A, result, &return_value);
        -:   17:  }
       13:   18:  return return_value;
        -:   19:}
        -:   20:
        5:   21:void s21_inverse_calculation(matrix_t *A, matrix_t *result, int *return_value) {
        5:   22:  double determinant = 0.0;
        5:   23:  *return_value = s21_determinant(A, &determinant);
        5:   24:  if (*return_value == RETURN_OK_0) {
        5:   25:    if (fabs(determinant) > S21_FLOAT_EPS) {
        -:   26:      matrix_t complements_matrix;
        -:   27:      matrix_t transpose_matrix;
        4:   28:      *return_value = s21_calc_complements(A, &complements_matrix);
        4:   29:      if (*return_value == RETURN_OK_0) {
        4:   30:        *return_value = s21_transpose(&complements_matrix, &transpose_matrix);
        4:   31:        if (*return_value == RETURN_OK_0) {
        4:   32:          determinant = 1 / determinant;
        4:   33:          *return_value =
        4:   34:              s21_mult_number(&transpose_matrix, determinant, result);
        -:   35:
        4:   36:          s21_remove_matrix(&transpose_matrix);
        -:   37:        }
        4:   38:        s21_remove_matrix(&complements_matrix);
        -:   39:      }
        -:   40:    } else {
        1:   41:      *return_value = RETURN_CALCULATION_ERROR_2;
        -:   42:    }
        -:   43:  }
        -:   44:
        5:   45:  return;
        -:   46:}
